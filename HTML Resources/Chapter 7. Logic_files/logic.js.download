var logic = {
	prepare : function() {
		act.add([
new act.Anim('ch7girl', 'InputAge',
	{
		'1'   : function(){noclass(); hide(); execute('1'); schedNext('2');},
		'2'   : function(){noclass(); execute('2'); schedNext('Age');},
		'3'   : function(){noclass(); execute('3'); vars.clss=undefined; schedNext('Class');},

		'4'   : function(){noclass(); execute('4'); schedNext(vars.age<=11?'5':'7');},
		'5'   : function(){noclass(); execute('5'); vars.clss='Primary'; schedNext('Class');},

		'7'   : function(){noclass(); execute('7'); var a = vars.age; schedNext(a==12||a==13?'8':'10');},
		'8'   : function(){noclass(); execute('8'); vars.clss='Beehive'; schedNext('Class');},

		'10'  : function(){noclass(); execute('10'); var a = vars.age; schedNext(a==14||a==15?'11':'13');},
		'11'  : function(){noclass(); execute('11'); vars.clss='Mia Maid'; schedNext('Class');},

		'13'  : function(){noclass(); execute('13'); var a = vars.age; schedNext(a==16||a==17?'14':'16');},
		'14'  : function(){noclass(); execute('14'); vars.clss='Laurel'; schedNext('Class');},

		'16'  : function(){noclass(); execute('16'); schedNext('17');},
		'17'  : function(){noclass(); execute('17'); vars.clss='Relief Society'; schedNext('Class');},

		'19'  : function(){noclass(); execute('19'); schedNext('Div');},
		'20'  : function(){noclass(); hide(); execute('20'); schedNext('End');},
		'End' : function(){noclass(); reset();},
		'InputAge' : function(){act.clear(idents); hide(); vars.age=act.randInt(8,20); enter('InputAge','EnterAge',vars.age); schedNext('Button');},
		'Button'   : function(){noclass(); hide(); click('Button','Click'); schedNext('1');},
		'Div'      : function(){display('Div','Display',vars.clss); schedNext('20');},
		'EnterAge' : null,
		'Click'    : null,
		'Display'  : null,
		'Age'   : function(){assign('Age',vars.age); schedNext('3');},
		'Class' : function(){var c=vars.clss; assign('Class',c); schedNext(c?'19':'4');}
	},
	{
		age : 0,
		clss : ''
	}),
new act.Anim('ch7scout', 'InputAge',
	{
		'1'   : function(){noclass(); hide(); execute('1'); schedNext('2');},
		'2'   : function(){noclass(); execute('2'); schedNext('Age');},
		'3'   : function(){noclass(); execute('3'); vars.group=undefined; schedNext('Group');},

		'4'   : function(){noclass(); execute('4'); schedNext(vars.age<7?'5':'7');},
		'5'   : function(){noclass(); execute('5'); vars.group='When you are 7 years old, you can&hellip;'; schedNext('Group');},

		'7'   : function(){noclass(); execute('7'); schedNext(vars.age==7?'8':'10');},
		'8'   : function(){noclass(); execute('8'); vars.group='Tiger'; schedNext('Group');},

		'10'   : function(){noclass(); execute('10'); schedNext(vars.age==8?'11':'13');},
		'11'   : function(){noclass(); execute('11'); vars.group='Wolf'; schedNext('Group');},

		'13'  : function(){noclass(); execute('13'); schedNext(vars.age==9?'14':'16');},
		'14'  : function(){noclass(); execute('14'); vars.group='Bear'; schedNext('Group');},

		'16'  : function(){noclass(); execute('16'); schedNext(vars.age==10?'17':'19');},
		'17'  : function(){noclass(); execute('17'); vars.group='Webelos'; schedNext('Group');},

		'19'  : function(){noclass(); execute('19'); var a=vars.age; schedNext(11<=a&&a<=13?'20':'22');},
		'20'  : function(){noclass(); execute('20'); vars.group='Boy Scout'; schedNext('Group');},

		'22'  : function(){noclass(); execute('22'); var a=vars.age; schedNext(14<=a&&a<=20?'23':'25');},
		'23'  : function(){noclass(); execute('23'); vars.group='Venture'; schedNext('Group');},

		'25'  : function(){noclass(); execute('25'); schedNext('26');},
		'26'  : function(){noclass(); execute('26'); vars.group='You are too old to join&hellip;'; schedNext('Group');},

		'28'  : function(){noclass(); execute('28'); schedNext('Div');},
		'29'  : function(){noclass(); hide(); execute('29'); schedNext('End');},
		'End' : function(){noclass(); reset();},
		'InputAge' : function(){act.clear(idents); hide(); vars.age=act.randInt(4,25); enter('InputAge','EnterAge',vars.age); schedNext('Button');},
		'Button'   : function(){noclass(); hide(); click('Button','Click'); schedNext('1');},
		'Div'      : function(){display('Div','Display',vars.group); schedNext('29');},
		'EnterAge' : null,
		'Click'    : null,
		'Display'  : null,
		'Age'   : function(){assign('Age',vars.age); schedNext('3');},
		'Group' : function(){var m=vars.group; assign('Group',m); schedNext(m?'28':'4');}
	},
	{
		age : 0,
		group : ''
	}),
new act.Anim('ch7auto', 'InputDriv',
	{
		'1'   : function(){noclass(); hide(); execute('1'); schedNext('2');},
		'2'   : function(){noclass(); execute('2'); schedNext('Driv');},
		'3'   : function(){noclass(); execute('3'); schedNext('Pass');},
		'4'   : function(){noclass(); execute('4'); vars.message=undefined; schedNext('Msg');},

		'5'   : function(){noclass(); execute('5'); schedNext(vars.driver>=54||(vars.driver>=32&&vars.passenger>=54)?'6':'8');},
		'6'   : function(){noclass(); execute('6'); vars.message='Enjoy the ride!'; schedNext('Msg');},

		'8'   : function(){noclass(); execute('8'); schedNext('9');},
		'9'   : function(){noclass(); execute('9'); vars.message='Sorry, to drive a car on the Autopia&hellip;'; schedNext('Msg');},

		'11'  : function(){noclass(); execute('11'); schedNext('Div');},
		'12'  : function(){noclass(); hide(); execute('12'); schedNext('End');},
		'End' : function(){noclass(); reset();},
		'InputDriv' : function(){act.clear(idents); hide(); vars.driver=act.randInt(26,68); enter('InputDriv','EnterDriv',vars.driver); schedNext('InputPass');},
		'InputPass' : function(){noclass(); hide(); vars.passenger=act.randInt(26,72); enter('InputPass','EnterPass',vars.passenger); schedNext('Button');},
		'Button'    : function(){noclass(); hide(); click('Button','Click'); schedNext('1');},
		'Div'       : function(){display('Div','Display',vars.message); schedNext('12');},
		'EnterDriv' : null,
		'EnterPass' : null,
		'Click'     : null,
		'Display'   : null,
		'Driv' : function(){assign('Driv',vars.driver); schedNext('3');},
		'Pass' : function(){assign('Pass',vars.passenger); schedNext('4');},
		'Msg'  : function(){var m=vars.message; assign('Msg',m); schedNext(m?'11':'5');}
	},
	{
		driver : 0,
		passenger : 0,
		message : ''
	}),
new act.Anim('ch7rangeA', '1',
	{
		'1'  : function(){act.clear(idents); vars.purch=act.randInt(100,1200); execute('1'); schedNext('Purch');},
		'2'  : function(){noclass(); execute('2'); vars.pc=3; schedNext('Rate');},
		'3'  : function(){noclass(); execute('3'); schedNext(vars.purch>=0&&vars.purch<300?'4':'6');},
		'4'  : function(){noclass(); execute('4'); vars.rate=0; vars.pc=6; schedNext('Rate');},
		'6'  : function(){noclass(); execute('6'); schedNext(vars.purch>=300&&vars.purch<600?'7':'9');},
		'7'  : function(){noclass(); execute('7'); vars.rate=0.02; vars.pc=9; schedNext('Rate');},
		'9'  : function(){noclass(); execute('9'); schedNext(vars.purch>=600&&vars.purch<1000?'10':'12');},
		'10' : function(){noclass(); execute('10'); vars.rate=0.025; vars.pc=12; schedNext('Rate');},
		'12' : function(){noclass(); execute('12'); schedNext(vars.purch>=1000?'13':'15');},
		'13' : function(){noclass(); execute('13'); vars.rate=0.03; vars.pc=15; schedNext('Rate');},
		'15' : function(){noclass(); execute('15'); vars.disc=Math.round(vars.purch*vars.rate*100)/100; schedNext('Disc');},
		'16' : function(){noclass(); execute('16'); vars.amount=vars.purch-vars.disc; schedNext('Return');},
		'17' : function(){noclass(); execute('17'); schedNext('End');},
		'End'    : function(){noclass(); reset();},
		'Purch'  : function(){assign('Purch',vars.purch); schedNext('2');},
		'Rate'   : function(){assign('Rate',vars.rate); schedNext(vars.pc);},
		'Disc'   : function(){assign('Disc',parseFloat(vars.disc.toFixed(2))); schedNext('16');},
		'Return' : function(){assign('Return',parseFloat(vars.amount.toFixed(2))); schedNext('17');}
	},
	{
		pc : 0,
		purch : 0,
		rate : 0,
		disc : 0,
		amount : 0
	}),
new act.Anim('ch7rangeB', '1',
	{
		'1'  : function(){act.clear(idents); vars.purch=act.randInt(100,1200); execute('1'); schedNext('Purch');},
		'2'  : function(){noclass(); execute('2'); schedNext('3');},
		'3'  : function(){noclass(); execute('3'); schedNext(vars.purch<300?'4':'6');},
		'4'  : function(){noclass(); execute('4'); vars.rate=0; schedNext('Rate');},
		'6'  : function(){noclass(); execute('6'); schedNext(vars.purch<600?'7':'9');},
		'7'  : function(){noclass(); execute('7'); vars.rate=0.02; schedNext('Rate');},
		'9'  : function(){noclass(); execute('9'); schedNext(vars.purch<1000?'10':'12');},
		'10' : function(){noclass(); execute('10'); vars.rate=0.025; schedNext('Rate');},
		'12' : function(){noclass(); execute('12'); schedNext('13');},
		'13' : function(){noclass(); execute('13'); vars.rate=0.03; schedNext('Rate');},
		'15' : function(){noclass(); execute('15'); vars.disc=Math.round(vars.purch*vars.rate*100)/100; schedNext('Disc');},
		'16' : function(){noclass(); execute('16'); vars.amount=vars.purch-vars.disc; schedNext('Return');},
		'17' : function(){noclass(); execute('17'); schedNext('End');},
		'End'    : function(){noclass(); reset();},
		'Purch'  : function(){assign('Purch',vars.purch); schedNext('2');},
		'Rate'   : function(){assign('Rate',vars.rate); schedNext('15');},
		'Disc'   : function(){assign('Disc',parseFloat(vars.disc.toFixed(2))); schedNext('16');},
		'Return' : function(){assign('Return',parseFloat(vars.amount.toFixed(2))); schedNext('17');}
	},
	{
		purch : 0,
		rate : 0,
		disc : 0,
		amount : 0
	}),
new act.Anim('ch7truth5', 'ExTable',
	{
		'Explain' : null,
		'ExTable' : function(){act.clear(idents); hide(); explain('Explain','Draw a table with 5 rows.'); schedNext('Table');},
		'Table'   : function(){draw('Table'); schedNext('HeadA');},
		'HeadA'   : function(){noclass(); explain('Explain','Label the first two columns <b>a</b> and <b>b</b>.'); schedNext('HeadB');},
		'HeadB'   : function(){write('HeadA','a'); write('HeadB','b'); schedNext('HeadNotA');},
		'HeadNotA': function(){noclass(); explain('Explain','Label the other columns with the logical expressions that you want to analyze.'); schedNext('HeadNotB');},
		'HeadNotB': function(){write('HeadNotA','<b>!a</b>'); write('HeadNotB','<b>!b</b>'); write('HeadAnd','<b>a &amp;&amp; b</b>'); write('HeadOr','<b>a || b</b>'); write('HeadXor','<b>a ^ b</b>'); schedNext('ExCombos');},
		'HeadAnd' : null,
		'HeadOr'  : null,
		'HeadXor' : null,
		'ExCombos': function(){noclass(); explain('Explain','Write all possible combinations of true and false in the first two columns.'); schedNext('Row1A');},
		'Row1A'   : function(){write('Row1A',str(false)); schedNext('Row1B');},
		'Row1B'   : function(){write('Row1B',str(false)); schedNext('Row2A');},
		'Row2A'   : function(){write('Row2A',str(false)); schedNext('Row2B');},
		'Row2B'   : function(){write('Row2B',str(true));  schedNext('Row3A');},
		'Row3A'   : function(){write('Row3A',str(true));  schedNext('Row3B');},
		'Row3B'   : function(){write('Row3B',str(false)); schedNext('Row4A');},
		'Row4A'   : function(){write('Row4A',str(true));  schedNext('Row4B');},
		'Row4B'   : function(){write('Row4B',str(true));  schedNext('ExNotA');},
		'ExNotA'  : function(){noclass(); explain('Explain','Write the opposite of the values shown in column <b>a</b>.'); schedNext('Row1NotA');},
		'Row1NotA': function(){write('Row1NotA',not('Row1A')); schedNext('Row2NotA');},
		'Row2NotA': function(){write('Row2NotA',not('Row2A')); schedNext('Row3NotA');},
		'Row3NotA': function(){write('Row3NotA',not('Row3A')); schedNext('Row4NotA');},
		'Row4NotA': function(){write('Row4NotA',not('Row4A')); schedNext('ExNotB');},
		'ExNotB'  : function(){noclass(); explain('Explain','Write the opposite of the values shown in column <b>b</b>.'); schedNext('Row1NotB');},
		'Row1NotB': function(){write('Row1NotB',not('Row1B')); schedNext('Row2NotB');},
		'Row2NotB': function(){write('Row2NotB',not('Row2B')); schedNext('Row3NotB');},
		'Row3NotB': function(){write('Row3NotB',not('Row3B')); schedNext('Row4NotB');},
		'Row4NotB': function(){write('Row4NotB',not('Row4B')); schedNext('ExAnd');},
		'ExAnd'   : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical And.'); schedNext('Row1And');},
		'Row1And' : function(){write('Row1And',and('Row1A','Row1B')); schedNext('Row2And');},
		'Row2And' : function(){write('Row2And',and('Row2A','Row2B')); schedNext('Row3And');},
		'Row3And' : function(){write('Row3And',and('Row3A','Row3B')); schedNext('Row4And');},
		'Row4And' : function(){write('Row4And',and('Row4A','Row4B')); schedNext('ExOr');},
		'ExOr'    : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical Or.'); schedNext('Row1Or');},
		'Row1Or'  : function(){write('Row1Or',or('Row1A','Row1B')); schedNext('Row2Or');},
		'Row2Or'  : function(){write('Row2Or',or('Row2A','Row2B')); schedNext('Row3Or');},
		'Row3Or'  : function(){write('Row3Or',or('Row3A','Row3B')); schedNext('Row4Or');},
		'Row4Or'  : function(){write('Row4Or',or('Row4A','Row4B')); schedNext('ExXor');},
		'ExXor'    : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical Exclusive Or.'); schedNext('Row1Xor');},
		'Row1Xor'  : function(){write('Row1Xor',xor('Row1A','Row1B')); schedNext('Row2Xor');},
		'Row2Xor'  : function(){write('Row2Xor',xor('Row2A','Row2B')); schedNext('Row3Xor');},
		'Row3Xor'  : function(){write('Row3Xor',xor('Row3A','Row3B')); schedNext('Row4Xor');},
		'Row4Xor'  : function(){write('Row4Xor',xor('Row4A','Row4B')); schedNext('End');},
		'End'     : function(){noclass(); hide(); reset();}
	},
	{
	}),
new act.Anim('ch7truth6', 'ExTable',
	{
		'Explain' : null,
		'ExTable' : function(){act.clear(idents); hide(); explain('Explain','Draw a table with 5 rows.'); schedNext('Table');},
		'Table'   : function(){draw('Table'); schedNext('HeadA');},
		'HeadA'   : function(){noclass(); explain('Explain','Label the first two columns <b>a</b> and <b>b</b>.'); schedNext('HeadB');},
		'HeadB'   : function(){write('HeadA','a'); write('HeadB','b'); schedNext('HeadOr');},
		'HeadOr'  : function(){noclass(); explain('Explain','Label the other columns with the logical expression that you want to analyze.'); schedNext('HeadAnd');},
		'HeadAnd' : function(){write('HeadOr','<b>(a || b)</b>'); write('HeadAnd','<b>&amp;&amp;</b>'); write('HeadNot','<b>!a</b>'); schedNext('ExCombos');},
		'HeadNot' : null,
		'ExCombos': function(){noclass(); explain('Explain','Write all possible combinations of true and false in the first two columns.'); schedNext('Row1A');},
		'Row1A'   : function(){write('Row1A',str(false)); schedNext('Row1B');},
		'Row1B'   : function(){write('Row1B',str(false)); schedNext('Row2A');},
		'Row2A'   : function(){write('Row2A',str(false)); schedNext('Row2B');},
		'Row2B'   : function(){write('Row2B',str(true));  schedNext('Row3A');},
		'Row3A'   : function(){write('Row3A',str(true));  schedNext('Row3B');},
		'Row3B'   : function(){write('Row3B',str(false)); schedNext('Row4A');},
		'Row4A'   : function(){write('Row4A',str(true));  schedNext('Row4B');},
		'Row4B'   : function(){write('Row4B',str(true));  schedNext('ExOr');},
		'ExOr'    : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical Or.'); schedNext('Row1Or');},
		'Row1Or'  : function(){write('Row1Or',or('Row1A','Row1B')); schedNext('Row2Or');},
		'Row2Or'  : function(){write('Row2Or',or('Row2A','Row2B')); schedNext('Row3Or');},
		'Row3Or'  : function(){write('Row3Or',or('Row3A','Row3B')); schedNext('Row4Or');},
		'Row4Or'  : function(){write('Row4Or',or('Row4A','Row4B')); schedNext('ExNot');},
		'ExNot'   : function(){noclass(); explain('Explain','Write the values for <b>!a</b>.'); schedNext('Row1Not');},
		'Row1Not' : function(){write('Row1Not',not('Row1A')); schedNext('Row2Not');},
		'Row2Not' : function(){write('Row2Not',not('Row2A')); schedNext('Row3Not');},
		'Row3Not' : function(){write('Row3Not',not('Row3A')); schedNext('Row4Not');},
		'Row4Not' : function(){write('Row4Not',not('Row4A')); schedNext('ExAnd');},
		'ExAnd'   : function(){noclass(); explain('Explain','Combine the values in columns <b>(a || b)</b> and <b>!a</b> using logical And.'); schedNext('Row1And');},
		'Row1And' : function(){write('Row1And',and('Row1Or','Row1Not')); schedNext('Row2And');},
		'Row2And' : function(){write('Row2And',and('Row2Or','Row2Not')); schedNext('Row3And');},
		'Row3And' : function(){write('Row3And',and('Row3Or','Row3Not')); schedNext('Row4And');},
		'Row4And' : function(){write('Row4And',and('Row4Or','Row4Not')); schedNext('End');},
		'End'     : function(){noclass(); hide(); reset();}
	},
	{
	}),
new act.Anim('ch7truth7', 'ExTable',
	{
		'Explain'  : null,
		'ExTable'  : function(){act.clear(idents); hide(); explain('Explain','Draw a table with 5 rows.'); schedNext('Table');},
		'Table'    : function(){draw('Table'); schedNext('HeadA');},
		'HeadA'    : function(){noclass(); explain('Explain','Label the first two columns <b>a</b> and <b>b</b>.'); schedNext('HeadB');},
		'HeadB'    : function(){write('HeadA','a'); write('HeadB','b'); schedNext('HeadNot');},
		'HeadNot'  : function(){noclass(); explain('Explain','Label the other columns with the logical expression that you want to analyze.'); schedNext('HeadOr');},
		'HeadOr'   : function(){write('HeadNot','<b>!</b>'); write('HeadOr','<b>(a || b)</b>'); write('HeadNotA','<b>!a</b>'); write('HeadAnd','<b>&amp;&amp;</b>'); write('HeadNotB','<b>!b</b>'); schedNext('ExCombos');},
		'HeadEquiv': function(){write('HeadEquiv','&hArr;'); schedNext('End');},
		'HeadNotA' : null,
		'HeadAnd'  : null,
		'HeadNotB' : null,
		'ExCombos' : function(){noclass(); explain('Explain','Write all possible combinations of true and false in the first two columns.'); schedNext('Row1A');},
		'Row1A'    : function(){write('Row1A',str(false)); schedNext('Row1B');},
		'Row1B'    : function(){write('Row1B',str(false)); schedNext('Row2A');},
		'Row2A'    : function(){write('Row2A',str(false)); schedNext('Row2B');},
		'Row2B'    : function(){write('Row2B',str(true));  schedNext('Row3A');},
		'Row3A'    : function(){write('Row3A',str(true));  schedNext('Row3B');},
		'Row3B'    : function(){write('Row3B',str(false)); schedNext('Row4A');},
		'Row4A'    : function(){write('Row4A',str(true));  schedNext('Row4B');},
		'Row4B'    : function(){write('Row4B',str(true));  schedNext('ExOr');},
		'ExOr'     : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical Or.'); schedNext('Row1Or');},
		'Row1Or'   : function(){write('Row1Or',or('Row1A','Row1B')); schedNext('Row2Or');},
		'Row2Or'   : function(){write('Row2Or',or('Row2A','Row2B')); schedNext('Row3Or');},
		'Row3Or'   : function(){write('Row3Or',or('Row3A','Row3B')); schedNext('Row4Or');},
		'Row4Or'   : function(){write('Row4Or',or('Row4A','Row4B')); schedNext('ExNot');},
		'ExNot'    : function(){noclass(); explain('Explain','Write the values for <b>!(a || b)</b>.'); schedNext('Row1Not');},
		'Row1Not'  : function(){write('Row1Not',not('Row1Or')); schedNext('Row2Not');},
		'Row2Not'  : function(){write('Row2Not',not('Row2Or')); schedNext('Row3Not');},
		'Row3Not'  : function(){write('Row3Not',not('Row3Or')); schedNext('Row4Not');},
		'Row4Not'  : function(){write('Row4Not',not('Row4Or')); schedNext('ExNotA');},
		'ExNotA'   : function(){noclass(); explain('Explain','Write the values for <b>!a</b>.'); schedNext('Row1NotA');},
		'Row1NotA' : function(){write('Row1NotA',not('Row1A')); schedNext('Row2NotA');},
		'Row2NotA' : function(){write('Row2NotA',not('Row2A')); schedNext('Row3NotA');},
		'Row3NotA' : function(){write('Row3NotA',not('Row3A')); schedNext('Row4NotA');},
		'Row4NotA' : function(){write('Row4NotA',not('Row4A')); schedNext('ExNotB');},
		'ExNotB'   : function(){noclass(); explain('Explain','Write the values for <b>!b</b>.'); schedNext('Row1NotB');},
		'Row1NotB' : function(){write('Row1NotB',not('Row1B')); schedNext('Row2NotB');},
		'Row2NotB' : function(){write('Row2NotB',not('Row2B')); schedNext('Row3NotB');},
		'Row3NotB' : function(){write('Row3NotB',not('Row3B')); schedNext('Row4NotB');},
		'Row4NotB' : function(){write('Row4NotB',not('Row4B')); schedNext('ExAnd');},
		'ExAnd'    : function(){noclass(); explain('Explain','Combine the values in columns <b>!a</b> and <b>!b</b> using logical And.'); schedNext('Row1And');},
		'Row1And'  : function(){write('Row1And',and('Row1NotA','Row1NotB')); schedNext('Row2And');},
		'Row2And'  : function(){write('Row2And',and('Row2NotA','Row2NotB')); schedNext('Row3And');},
		'Row3And'  : function(){write('Row3And',and('Row3NotA','Row3NotB')); schedNext('Row4And');},
		'Row4And'  : function(){write('Row4And',and('Row4NotA','Row4NotB')); schedNext('ExEquiv');},
		'ExEquiv'  : function(){noclass(); explain('Explain','Compare the results in columns <b>!</b> and <b>&amp;&amp;</b>. If the results are the same, then !(a || b) is equivalent to !a &amp;&amp; !b'); schedNext('Check');},
		'Check'    : function(){examine('Row1Not','Row2Not','Row3Not','Row4Not','Row1And','Row2And','Row3And','Row4And'); schedNext('HeadEquiv');},
		'End'      : function(){noclass(); hide(); reset();}
	},
	{
	}),
new act.Anim('ch7truth8', 'ExTable',
	{
		'Explain'  : null,
		'ExTable'  : function(){act.clear(idents); hide(); explain('Explain','Draw a table with 5 rows.'); schedNext('Table');},
		'Table'    : function(){draw('Table'); schedNext('HeadA');},
		'HeadA'    : function(){noclass(); explain('Explain','Label the first two columns <b>a</b> and <b>b</b>.'); schedNext('HeadB');},
		'HeadB'    : function(){write('HeadA','a'); write('HeadB','b'); schedNext('HeadAnd');},
		'HeadAnd'  : function(){noclass(); explain('Explain','Label the other columns with the logical expression that you want to analyze.'); schedNext('HeadXor');},
		'HeadXor'  : function(){write('HeadAnd','<b>(a &amp;&amp; b)</b>'); write('HeadXor','<b>^</b>'); write('HeadNot','<b>!</b>'); write('HeadOr','<b>(a || b)</b>'); schedNext('ExCombos');},
		'HeadNot'  : null,
		'HeadOr'   : null,
		'ExCombos' : function(){noclass(); explain('Explain','Write all possible combinations of true and false in the first two columns.'); schedNext('Row1A');},
		'Row1A'    : function(){write('Row1A',str(false)); schedNext('Row1B');},
		'Row1B'    : function(){write('Row1B',str(false)); schedNext('Row2A');},
		'Row2A'    : function(){write('Row2A',str(false)); schedNext('Row2B');},
		'Row2B'    : function(){write('Row2B',str(true));  schedNext('Row3A');},
		'Row3A'    : function(){write('Row3A',str(true));  schedNext('Row3B');},
		'Row3B'    : function(){write('Row3B',str(false)); schedNext('Row4A');},
		'Row4A'    : function(){write('Row4A',str(true));  schedNext('Row4B');},
		'Row4B'    : function(){write('Row4B',str(true));  schedNext('ExAnd');},
		'ExAnd'    : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical And.'); schedNext('Row1And');},
		'Row1And'  : function(){write('Row1And',and('Row1A','Row1B')); schedNext('Row2And');},
		'Row2And'  : function(){write('Row2And',and('Row2A','Row2B')); schedNext('Row3And');},
		'Row3And'  : function(){write('Row3And',and('Row3A','Row3B')); schedNext('Row4And');},
		'Row4And'  : function(){write('Row4And',and('Row4A','Row4B')); schedNext('ExOr');},
		'ExOr'     : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical Or.'); schedNext('Row1Or');},
		'Row1Or'   : function(){write('Row1Or',or('Row1A','Row1B')); schedNext('Row2Or');},
		'Row2Or'   : function(){write('Row2Or',or('Row2A','Row2B')); schedNext('Row3Or');},
		'Row3Or'   : function(){write('Row3Or',or('Row3A','Row3B')); schedNext('Row4Or');},
		'Row4Or'   : function(){write('Row4Or',or('Row4A','Row4B')); schedNext('ExNot');},
		'ExNot'    : function(){noclass(); explain('Explain','Write the values for <b>! (a || b)</b>.'); schedNext('Row1Not');},
		'Row1Not'  : function(){write('Row1Not',not('Row1Or')); schedNext('Row2Not');},
		'Row2Not'  : function(){write('Row2Not',not('Row2Or')); schedNext('Row3Not');},
		'Row3Not'  : function(){write('Row3Not',not('Row3Or')); schedNext('Row4Not');},
		'Row4Not'  : function(){write('Row4Not',not('Row4Or')); schedNext('ExXor');},
		'ExXor'    : function(){noclass(); explain('Explain','Combine the values in columns <b>(a &amp;&amp; b)</b> and <b>!</b> using logical Xor.'); schedNext('Row1Xor');},
		'Row1Xor'  : function(){write('Row1Xor',or('Row1And','Row1Not')); schedNext('Row2Xor');},
		'Row2Xor'  : function(){write('Row2Xor',or('Row2And','Row2Not')); schedNext('Row3Xor');},
		'Row3Xor'  : function(){write('Row3Xor',or('Row3And','Row3Not')); schedNext('Row4Xor');},
		'Row4Xor'  : function(){write('Row4Xor',or('Row4And','Row4Not')); schedNext('End');},
		'End'      : function(){noclass(); hide(); reset();}
	},
	{
	}),
new act.Anim('ch7truth9', 'ExTable',
	{
		'Explain'  : null,
		'ExTable'  : function(){act.clear(idents); hide(); explain('Explain','Draw a table with 9 rows.'); schedNext('Table');},
		'Table'    : function(){draw('Table'); schedNext('HeadA');},
		'HeadA'    : function(){noclass(); explain('Explain','Label the first two columns <b>a</b>, <b>b</b>, and <b>c</b>.'); schedNext('HeadB');},
		'HeadB'    : function(){write('HeadA','a'); write('HeadB','b'); write('HeadC','c'); schedNext('HeadOr1');},
		'HeadC'    : null,
		'HeadOr1'  : function(){noclass(); explain('Explain','Label the other columns with the logical expression that you want to analyze.'); schedNext('HeadOr2');},
		'HeadOr2'  : function(){write('HeadOr1','<b>(a || b)</b>'); write('HeadOr2','<b>|| c</b>'); write('HeadOr3','<b>a ||</b>'); write('HeadOr4','<b>(b || c)</b>'); schedNext('ExCombos');},
		'HeadEquiv': function(){write('HeadEquiv','&hArr;'); schedNext('End');},
		'HeadOr3'  : null,
		'HeadOr4'  : null,
		'ExCombos' : function(){noclass(); explain('Explain','Write all possible combinations of true and false in the first three columns.'); schedNext('Row1A');},
		'Row1A'    : function(){write('Row1A',str(false)); schedNext('Row1B');},
		'Row1B'    : function(){write('Row1B',str(false)); schedNext('Row1C');},
		'Row1C'    : function(){write('Row1C',str(false)); schedNext('Row2A');},
		'Row2A'    : function(){write('Row2A',str(false)); schedNext('Row2B');},
		'Row2B'    : function(){write('Row2B',str(false)); schedNext('Row2C');},
		'Row2C'    : function(){write('Row2C',str(true)); schedNext('Row3A');},
		'Row3A'    : function(){write('Row3A',str(false)); schedNext('Row3B');},
		'Row3B'    : function(){write('Row3B',str(true)); schedNext('Row3C');},
		'Row3C'    : function(){write('Row3C',str(false)); schedNext('Row4A');},
		'Row4A'    : function(){write('Row4A',str(false)); schedNext('Row4B');},
		'Row4B'    : function(){write('Row4B',str(true)); schedNext('Row4C');},
		'Row4C'    : function(){write('Row4C',str(true)); schedNext('Row5A');},
		'Row5A'    : function(){write('Row5A',str(true)); schedNext('Row5B');},
		'Row5B'    : function(){write('Row5B',str(false)); schedNext('Row5C');},
		'Row5C'    : function(){write('Row5C',str(false)); schedNext('Row6A');},
		'Row6A'    : function(){write('Row6A',str(true)); schedNext('Row6B');},
		'Row6B'    : function(){write('Row6B',str(false)); schedNext('Row6C');},
		'Row6C'    : function(){write('Row6C',str(true)); schedNext('Row7A');},
		'Row7A'    : function(){write('Row7A',str(true)); schedNext('Row7B');},
		'Row7B'    : function(){write('Row7B',str(true)); schedNext('Row7C');},
		'Row7C'    : function(){write('Row7C',str(false)); schedNext('Row8A');},
		'Row8A'    : function(){write('Row8A',str(true)); schedNext('Row8B');},
		'Row8B'    : function(){write('Row8B',str(true)); schedNext('Row8C');},
		'Row8C'    : function(){write('Row8C',str(true)); schedNext('ExOr1');},
		'ExOr1'    : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>b</b> using logical Or.'); schedNext('Row1Or1');},
		'Row1Or1'  : function(){write('Row1Or1',or('Row1A','Row1B')); schedNext('Row2Or1');},
		'Row2Or1'  : function(){write('Row2Or1',or('Row2A','Row2B')); schedNext('Row3Or1');},
		'Row3Or1'  : function(){write('Row3Or1',or('Row3A','Row3B')); schedNext('Row4Or1');},
		'Row4Or1'  : function(){write('Row4Or1',or('Row4A','Row4B')); schedNext('Row5Or1');},
		'Row5Or1'  : function(){write('Row5Or1',or('Row5A','Row5B')); schedNext('Row6Or1');},
		'Row6Or1'  : function(){write('Row6Or1',or('Row6A','Row6B')); schedNext('Row7Or1');},
		'Row7Or1'  : function(){write('Row7Or1',or('Row7A','Row7B')); schedNext('Row8Or1');},
		'Row8Or1'  : function(){write('Row8Or1',or('Row8A','Row8B')); schedNext('ExOr2');},
		'ExOr2'    : function(){noclass(); explain('Explain','Combine the values in columns <b>(a || b)</b> and <b>c</b> using logical Or.'); schedNext('Row1Or2');},
		'Row1Or2'  : function(){write('Row1Or2',or('Row1Or1','Row1C')); schedNext('Row2Or2');},
		'Row2Or2'  : function(){write('Row2Or2',or('Row2Or1','Row2C')); schedNext('Row3Or2');},
		'Row3Or2'  : function(){write('Row3Or2',or('Row3Or1','Row3C')); schedNext('Row4Or2');},
		'Row4Or2'  : function(){write('Row4Or2',or('Row4Or1','Row4C')); schedNext('Row5Or2');},
		'Row5Or2'  : function(){write('Row5Or2',or('Row5Or1','Row5C')); schedNext('Row6Or2');},
		'Row6Or2'  : function(){write('Row6Or2',or('Row6Or1','Row6C')); schedNext('Row7Or2');},
		'Row7Or2'  : function(){write('Row7Or2',or('Row7Or1','Row7C')); schedNext('Row8Or2');},
		'Row8Or2'  : function(){write('Row8Or2',or('Row8Or1','Row8C')); schedNext('ExOr4');},
		'ExOr3'    : function(){noclass(); explain('Explain','Combine the values in columns <b>a</b> and <b>(b || c)</b> using logical Or.'); schedNext('Row1Or3');},
		'Row1Or3'  : function(){write('Row1Or3',or('Row1A','Row1Or4')); schedNext('Row2Or3');},
		'Row2Or3'  : function(){write('Row2Or3',or('Row2A','Row2Or4')); schedNext('Row3Or3');},
		'Row3Or3'  : function(){write('Row3Or3',or('Row3A','Row3Or4')); schedNext('Row4Or3');},
		'Row4Or3'  : function(){write('Row4Or3',or('Row4A','Row4Or4')); schedNext('Row5Or3');},
		'Row5Or3'  : function(){write('Row5Or3',or('Row5A','Row5Or4')); schedNext('Row6Or3');},
		'Row6Or3'  : function(){write('Row6Or3',or('Row6A','Row6Or4')); schedNext('Row7Or3');},
		'Row7Or3'  : function(){write('Row7Or3',or('Row7A','Row7Or4')); schedNext('Row8Or3');},
		'Row8Or3'  : function(){write('Row8Or3',or('Row8A','Row8Or4')); schedNext('ExEquiv');},
		'ExOr4'    : function(){noclass(); explain('Explain','Combine the values in columns <b>b</b> and <b>c</b> using logical Or.'); schedNext('Row1Or4');},
		'Row1Or4'  : function(){write('Row1Or4',or('Row1B','Row1C')); schedNext('Row2Or4');},
		'Row2Or4'  : function(){write('Row2Or4',or('Row2B','Row2C')); schedNext('Row3Or4');},
		'Row3Or4'  : function(){write('Row3Or4',or('Row3B','Row3C')); schedNext('Row4Or4');},
		'Row4Or4'  : function(){write('Row4Or4',or('Row4B','Row4C')); schedNext('Row5Or4');},
		'Row5Or4'  : function(){write('Row5Or4',or('Row5B','Row5C')); schedNext('Row6Or4');},
		'Row6Or4'  : function(){write('Row6Or4',or('Row6B','Row6C')); schedNext('Row7Or4');},
		'Row7Or4'  : function(){write('Row7Or4',or('Row7B','Row7C')); schedNext('Row8Or4');},
		'Row8Or4'  : function(){write('Row8Or4',or('Row8B','Row8C')); schedNext('ExOr3');},
		'ExEquiv'  : function(){noclass(); explain('Explain','Compare the results in columns <b>|| c</b> and <b>a ||</b>. If the results<br>are the same, then (a || b) || c is equivalent to a || (b || c)'); schedNext('Check');},
		'Check'    : function(){examine('Row1Or2','Row2Or2','Row3Or2','Row4Or2','Row5Or2','Row6Or2','Row7Or2','Row8Or2','Row1Or3','Row2Or3','Row3Or3','Row4Or3','Row5Or3','Row6Or3','Row7Or3','Row8Or3'); schedNext('HeadEquiv');},
		'End'      : function(){noclass(); hide(); reset();}
	},
	{
	})
		]);
		act.prepare();
	}
};
